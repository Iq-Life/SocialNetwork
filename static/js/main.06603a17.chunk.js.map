{"version":3,"sources":["assets/img/805.svg","components/Profile/Profile.module.css","assets/img/no.png","assets/img/yes.png","components/Profile/ProfileInfo/ProfileDataForm.module.css","components/Profile/Myposts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Dialogs/Dialog.module.css","components/Navbar/Navbar.tsx","components/Setting/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","redux/dialogs-reducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/common/formControls/FormsControls.tsx","utils/validators/validators.ts","components/Dialogs/Dialog.tsx","api/api.ts","hoc/AuthRedirect.tsx","components/Dialogs/DialogContainer.tsx","utils/validators/object-heipers.ts","api/userAPI.ts","redux/users-reducer.tsx","components/common/paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","components/common/preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/MyPosts.tsx","api/profileAPI.ts","redux/profile-reducer.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","api/authAPI.ts","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/sidebar-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","App.tsx","index.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","Container.module.css","components/Header/Header.module.css","assets/img/ava.png","components/Users/Users.module.css","components/common/paginator/Paginator.module.css","components/common/formControls/FormsControls.module.css","components/Users/User.module.css","components/Profile/Myposts/MyPosts.module.css"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","Settings","News","Music","initialState","dialogs","id","name","messages","message","DialogItem","props","path","dialog","active","Message","FormControl","meta","touched","error","children","hasError","styles","formControl","Textarea","input","restProps","Input","CreateField","placeholder","validate","component","text","Field","required","value","maxLengthCreator","maxLength","length","ResultCodeEnum","ResultForCaptcha","maxLength50","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Dialogs","dialogElements","dialogsPage","map","d","messageElements","m","isAuth","dialogsItems","values","addMessage","newMessageBody","mapStateToPropsForRedirect","state","auth","isFetching","compose","connect","type","Component","RedirectComponent","this","React","instance","axios","create","baseURL","withCredentials","headers","securityAPI","get","updateObjectInArray","items","itemId","objPropName","newObjProps","u","userAPI","getUsers","currentPage","pageSize","then","response","data","follow","userId","post","unfollow","delete","users","totalUsersCount","followingInProgress","followSuccess","usersID","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingInProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","Success","Paginator","portionSize","totalItemsCount","onPageChange","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","style","spanPage","onClick","filter","p","selectedPage","usersPage","e","User","user","ava","src","photos","small","avatar","alt","followed","disabled","some","status","Users","all","paginator","key","Preloader","preloader","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersThunkCreator","bind","count","totalCount","ProfileStatusWithHooks","updateStatusProfile","editMode","setEditMode","localStatus","setLocalStatus","useEffect","deactivateEditMode","onDoubleClick","onFocus","event","target","select","autoFocus","onBlur","onChange","currentTarget","onKeyPress","ProfileDataReduxForm","profile","ProfileInfoStyle","blockInfo","Object","keys","contacts","containerStyle","formSummaryError","ProfileInfo","isOwner","savePhoto","saveProfile","blockProfile","initialValues","formData","goToEditMode","blockPhoto","avaProfile","large","files","ProfileData","fullName","aboutMe","lookingForAJob","YES","width","height","NO","lookingForAJobDescription","contactTitle","contactValue","Contacts","Post","like","MyPosts","memo","postsElements","posts","allPost","MyPostReduxForm","addPost","newPostText","maxLength25","profileAPI","put","photoFile","FormData","append","setStatusProfile","savePhotoSuccess","saveProfileSuccess","MyPostsContainer","profilePage","Profile","content","ProfileContainer","match","params","authorizedUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","alert","stopSubmit","_error","Promise","reject","withRouter","Header","backImg","header","loginBock","loginBockAuthorized","login","logout","authAPI","email","password","rememberMe","captcha","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAutUserData","getCaptchaUrl","url","HeaderContainer","LoginReduxForm","CaptchaIsRequired","initialized","reducersBatch","combineReducers","action","newPost","Date","getTime","sidebar","formReducer","app","errorMessage","store","createStore","applyMiddleware","thunkMiddleware","window","stroe","App","initializeApp","initialize","exact","from","render","AppContainer","promise","SamuraiJSApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.06603a17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/805.f32be7a1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3SeNT\"};","module.exports = __webpack_public_path__ + \"static/media/no.7b994355.png\";","module.exports = __webpack_public_path__ + \"static/media/yes.935574cf.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockProfile\":\"ProfileDataForm_blockProfile__2S0va\",\"blockPhoto\":\"ProfileDataForm_blockPhoto__3JK0h\",\"blockInfo\":\"ProfileDataForm_blockInfo__kqzuJ\",\"head\":\"ProfileDataForm_head__2y-Wm\",\"avaProfile\":\"ProfileDataForm_avaProfile__35YjB\",\"contacts\":\"ProfileDataForm_contacts__3H-ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3w5gu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1CjYi\",\"item\":\"Navbar_item__3V3a3\",\"activeLink\":\"Navbar_activeLink__39u1E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__2KmIO\",\"dialogsItems\":\"Dialog_dialogsItems__3mI_E\",\"active\":\"Dialog_active__5pVRS\",\"messages\":\"Dialog_messages__2N_Yp\",\"message\":\"Dialog_message__mB0NA\",\"dialog\":\"Dialog_dialog__3QJ_9\",\"textMessages\":\"Dialog_textMessages__3ehuU\"};","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )}\r\n\r\n","import React from \"react\";\nimport './Settings.css';\n\nfunction Settings() {\n    return <div>\n        set\n    </div>\n}\n\nexport default Settings;\n","import React from \"react\";\nimport './News.css';\n\nfunction News() {\n    return <div>\n                new\n            </div>\n}\n\nexport default News;\n","import React from \"react\";\nimport './Music.css';\n\n\nfunction Music() {\n    return <div>\n                mus\n            </div>\n}\n\nexport default Music;\n","import {ActionTypes} from \"./redux-store\";\r\n\r\nconst ADD_MESSAGE = 'ADD_MESSAGE'\r\n\r\nlet initialState: DialogsPgeType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Diana\"},\r\n        {id: 2, name: \"Kirill\"},\r\n        {id: 3, name: \"Ilya\"},\r\n        {id: 4, name: \"Anton\"},\r\n        {id: 5, name: \"Maldor\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Hi\"},\r\n        {id: 5, message: \"Pi\"}\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionTypes): DialogsPgeType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {...state, messages: [...state.messages, {id: 6, message: action.newMessageBody}]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const addMessage = (newMessageBody: string) => {\r\n    return {type: \"ADD_MESSAGE\", newMessageBody: newMessageBody} as const}\r\n//type\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsPgeType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialog.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nfunction DialogItem(props: DialogsType) {\r\n\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialog.module.css';\r\nimport {MessagesType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nfunction Message(props:MessagesType) {\r\n\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form/lib/Field\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport function CreateField<FormKeysType extends string>(placeholder: string | null, name: FormKeysType, validate: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>, props: {} | null, text: string | null) {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               component={component} validate={validate}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\n//type\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required : FieldValidatorType = (value: string): string | undefined => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return \"Field is required\"\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) : FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n\r\nexport const maxLength: FieldValidatorType= (value) => {\r\n    if (value.length > 30) {\r\n        return undefined\r\n    } else {\r\n        return \"Field is required\"\r\n    }\r\n}","import React, {FormEvent} from 'react';\r\nimport s from './Dialog.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogsPgeType} from \"../../redux/dialogs-reducer\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/formControls/FormsControls\";\r\nimport { maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsType = {\r\n    dialogsPage: DialogsPgeType\r\n    isAuth: boolean\r\n    addMessage: (values: string) => void\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    addNewMessage: (newMessageBody: string) => void\r\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nfunction Dialogs(props: DialogsType) {\r\n\r\n    let dialogElements = props.dialogsPage.dialogs\r\n        .map((d) => <DialogItem name={d.name} id={d.id}/>);\r\n    let messageElements = props.dialogsPage.messages\r\n        .map((m) => <Message id={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={\"Enter Your message\"} name={\"newMessageBody\"}\r\n                   component={Textarea} validate={[required, maxLength50]}/>\r\n        </div>\r\n        <button>add message</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormType>({form: \"newMessageBody\"})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"d9baecdc-1ca4-440c-8d10-aee3256853c8\"\r\n    }\r\n})\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\n//types & enum\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isFetching\r\n})\r\n\r\nexport let withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'login/'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect) (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport {addMessage, DialogsPgeType} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialog\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToProps = {\r\n    dialogsPage: DialogsPgeType\r\n}\r\ntype MapDispatchToProps = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToProps, MapDispatchToProps, {}, AppStateType>\r\n    (mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);","import {UserType} from \"../../redux/users-reducer\";\r\n\r\nexport const updateObjectInArray = (items: Array<UserType>, itemId: number,\r\n                                    objPropName: any, newObjProps: any) => {\r\n    return items.map(u => {\r\n        // @ts-ignore\r\n        if (u[objPropName] === itemId) {\r\n            // @ts-ignore\r\n            return {...u, ...newObjProps}\r\n        } else {\r\n            return u\r\n        }\r\n    })\r\n}","import {APIResponseType, instance} from \"./api\";\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n","import {ActionTypes, ThunksType} from \"./redux-store\";\r\nimport {ResultCodeEnum} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/validators/object-heipers\";\r\nimport {userAPI} from \"../api/userAPI\";\r\n\r\nconst FOLLOWED = \"FOLLOWED\"\r\nconst UNFOLLOWED = \"UNFOLLOWED\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOWED:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.usersID,\r\n                    \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOWED:\r\n            return {\r\n                ...state, users: updateObjectInArray(state.users, action.usersID,\r\n                    \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT :\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING :\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS : {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const followSuccess = (usersID: number) => {\r\n    return {type: \"FOLLOWED\", usersID} as const\r\n}\r\nexport const unfollowSuccess = (usersID: number) => {\r\n    return {type: \"UNFOLLOWED\", usersID} as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {type: \"SET_USERS\", users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: \"SET_CURRENT_PAGE\", currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {type: \"SET_TOTAL_USERS_COUNT\", count: totalCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: \"TOGGLE_IS_FETCHING\", isFetching} as const\r\n}\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => {\r\n    return {type: \"TOGGLE_IS_FOLLOWING_PROGRESS\", isFetching, userId} as const\r\n}\r\n//thunk\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number): ThunksType =>\r\n    async (dispatch) => {\r\n\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n\r\n        let data = await userAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionTypes>, userId: number,\r\n                                   apiMethod: (userId: number) => any,\r\n                                   actionCreator: (userId: number) => ActionTypes) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode == ResultCodeEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunksType =>\r\n    async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userId), followSuccess)\r\n    }\r\nexport const unfollow = (userId: number): ThunksType =>\r\n    async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userId), unfollowSuccess)\r\n    }\r\n//type\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: { small: string, large: string }\r\n    followed: boolean,\r\n    location: { country: string, city: string },\r\n}\r\ntype InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport style from './Paginator.module.css'\r\n\r\nexport let Paginator: React.FC<PaginatorType> = ({\r\n                                                     portionSize, totalItemsCount,\r\n                                                     pageSize, currentPage, onPageChange\r\n                                                 }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return <div className={style.spanPage}>\r\n        {portionNumber > 1 && <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>\r\n            back</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span className={currentPage === p ? style.selectedPage : style.usersPage}\r\n                             onClick={(e: React.MouseEvent<HTMLSpanElement>) => {\r\n                                 onPageChange(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n        {portionCount > portionNumber && <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>next</button>}\r\n    </div>\r\n}\r\n\r\n//type\r\ntype PaginatorType = {\r\n    portionSize: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (p: number) => void\r\n}\r\n","import React from \"react\";\r\nimport avatar from './../../assets/img/ava.png';\r\nimport style from './User.module.css'\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport let User = (props: UserPropsType) => {\r\n    let user = props.user\r\n    return (\r\n        <div className={style.user}>\r\n            <div>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img className={style.ava}\r\n                         src={user.photos.small != null ? user.photos.small : avatar}\r\n                         alt=\"ava\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                {user.followed\r\n                    ? <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  props.unfollow(user.id)\r\n                              }}>\r\n                        Unfollow</button>\r\n                    : <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                              onClick={() => {\r\n                                  props.follow(user.id)\r\n                              }}>\r\n                        Follow</button>}\r\n            </div>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n            <div>{\"user.location.country\"}</div>\r\n            <div>{\"user.location.city\"}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\nexport type UserPropsType = {\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n","import React, {FC} from \"react\";\r\nimport style from './Users.module.css'\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\nexport let Users: FC<UsersPropsType> = ({\r\n                                            users, follow, unfollow, totalUsersCount,\r\n                                            pageSize, currentPage, onPageChange, followingInProgress,\r\n                                        }) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div className={style.all}>\r\n        <div className={style.paginator}>\r\n            <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize}\r\n                       currentPage={currentPage} onPageChange={onPageChange}\r\n                       portionSize={15}/>\r\n        </div>\r\n        <div className={style.users}>\r\n            {users.map(u => <User\r\n                key={u.id}\r\n                user={u}\r\n                followingInProgress={followingInProgress}\r\n                follow={follow}\r\n                unfollow={unfollow}\r\n            />)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n//type\r\nexport type UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChange: (p: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/img/805.svg\";\r\n\r\n\r\nexport let Preloader = () => {\r\n    return <div >\r\n        <img src={preloader} alt=\"loading...\"/>\r\n    </div>\r\n}","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UserType} from \"./users-reducer\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users: UserType[]) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from \"react\";\r\nimport {follow, getUsersThunkCreator, unfollow, UserType} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress, getIsFetching,\r\n    getPageSize, getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\nclass UsersContainer extends React.Component <UsersContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsersThunkCreator(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsersThunkCreator(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   users={this.props.users}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChange={this.onPageChange}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>\r\n    (mapStateToProps, {follow, unfollow, getUsersThunkCreator}))(UsersContainer)\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n}\r\nexport type UsersContainerPropsType = MapDispatchToProps & MapStateToPropsType\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({status, updateStatusProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [localStatus, setLocalStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatusProfile(localStatus)\r\n    }\r\n    const handleFocus = (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.target.select()\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n    const addStatusKeyPress = (e: any) => {\r\n        if (e.key === \"Enter\") {\r\n            deactivateEditMode()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {!editMode &&\r\n        <div>\r\n            <span onDoubleClick={activateEditMode}>{status || \" --- \"}</span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <div>\r\n            <input onFocus={handleFocus}\r\n                   autoFocus={true}\r\n                   onBlur={deactivateEditMode}\r\n                   value={localStatus}\r\n                   onChange={onStatusChange}\r\n                   onKeyPress={addStatusKeyPress}\r\n            />\r\n        </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n//type\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n}\r\n","import React from \"react\";\r\nimport ProfileInfoStyle from \"./ProfileDataForm.module.css\";\r\nimport {UserProfile} from \"../../../redux/profile-reducer\";\r\nimport {CreateField, Input, Textarea} from \"../../common/formControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport containerStyle from \"../../../Container.module.css\"\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfile, ProfileDataFormType> & ProfileDataFormType> =\r\n    ({profile, handleSubmit, error}) => {\r\n        return <form onSubmit={handleSubmit} className={ProfileInfoStyle.blockInfo}>\r\n            <div><b>Name</b>:\r\n                {CreateField(\"Full Name\", \"fullName\",\r\n                    [], Input, null, null)}\r\n            </div>\r\n            <div><b>About me</b>:\r\n                {CreateField(\"About me\", \"aboutMe\",\r\n                    [], Textarea, null, null)}\r\n            </div>\r\n            <div><b>Looking for a job</b>:\r\n                {CreateField(\"Looking for a job?\", \"lookingForAJob\",\r\n                    [], Input, {type: \"checkbox\"}, null)}\r\n            </div>\r\n            <div><b>My professional skills</b>:\r\n                {CreateField(\"My professional skills\", \"lookingForAJobDescription\",\r\n                    [], Textarea, null, null)}\r\n            </div>\r\n            <div><b>Contacts</b>:\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={containerStyle.contacts}><b>{key}:\r\n                        {CreateField(key, \"contacts.\" + key, [], Input, null, null)}</b></div>\r\n                })}\r\n            </div>\r\n            {error && <div className={containerStyle.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <button>save</button>\r\n        </form>\r\n    }\r\n\r\nexport const ProfileDataReduxForm = reduxForm<UserProfile, ProfileDataFormType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm\r\n//type\r\ntype ProfileDataFormType = {\r\n    profile: UserProfile\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport NO from './../../../assets/img/no.png';\r\nimport YES from './../../../assets/img/yes.png';\r\nimport {ContactsUserProfile, UserProfile} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\nimport avatar from './../../../assets/img/ava.png';\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                           profile, status, isOwner,\r\n                                                           savePhoto, updateStatusProfile, saveProfile\r\n                                                       }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if\r\n    (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: UserProfile) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.blockProfile}>\r\n            <div>{editMode ?\r\n                <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n                <ProfileData profile={profile} goToEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n            <div className={s.blockPhoto}>\r\n                <div><b>Status</b>:<ProfileStatusWithHooks status={status} updateStatusProfile={updateStatusProfile}/>\r\n                </div>\r\n                <div>\r\n                    <img className={s.avaProfile} src={profile.photos.large || avatar} alt={\"user avatar\"}/>\r\n                    <div>{isOwner && <input className={s.input} type={\"file\"} onChange={onMainPhotoSelected}/>}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, goToEditMode}) => {\r\n    return <div className={s.blockInfo}>\r\n        <div><b>Name</b>: <div>{profile && profile.fullName}</div>\r\n        </div>\r\n        <div><b>About me</b>: {profile && profile.aboutMe}</div>\r\n        <div><b>Looking for a job</b>: {profile && profile.lookingForAJob\r\n            ? <img src={YES} alt={\"Yes\"} width={30} height={30}/>\r\n            : <img src={NO} alt={\"No\"} width={30} height={30}/>}\r\n        </div>\r\n        <div><b>My professional skills</b>: {profile && profile.lookingForAJobDescription}</div>\r\n        <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contacts key={key} contactTitle={key}\r\n                             contactValue={profile.contacts[key as | keyof ContactsUserProfile]}/>\r\n        })}\r\n        </div>\r\n        <button onClick={() => goToEditMode()}>edit</button>\r\n    </div>\r\n}\r\nexport const Contacts = (props: ContactsType) => {\r\n    return <div className={s.contacts}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n//type\r\ntype ProfileInfoType = {\r\n    profile: UserProfile | null\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photos: File) => void\r\n    //todo types promise\r\n    saveProfile: (profile: UserProfile) => any\r\n    updateStatusProfile: (status: string) => void\r\n}\r\ntype ProfileDataType = {\r\n    profile: UserProfile\r\n    goToEditMode: () => void\r\n\r\n}\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    like: number\r\n}\r\n\r\nfunction Post(props:PostType) {\r\n    return <div>\r\n        <div className={s.item}>\r\n            <img src='https://img3.goodfon.ru/wallpaper/nbig/4/99/neytiri-avatar.jpg' alt={\"Avatar\"}/>\r\n            {props.message}\r\n            <div><span>like</span>  {props.like}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Post;","import React, {FormEvent} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostType} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport  {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostsType>\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    let postsElements = props.posts\r\n        .map((post: PostType) => <Post id={post.id} message={post.message} like={post.like} key={post.id}/>)\r\n//todo types\r\n    let newAddPost = (values:any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    /*const addPostKeyPress = (e: any) => {\r\n        if (e.key === \"Enter\") {\r\n            onAddPost()\r\n        }\r\n    }*/\r\n\r\n    return (\r\n        <div className={s.allPost}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <MyPostReduxForm onSubmit={newAddPost}/>\r\n                <div className={s.item}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype MyPostFormType = {\r\n    handleSubmit: (event: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nconst maxLength25 = maxLengthCreator(25)\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<MyPostFormType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={\"Enter Your post\"} name={\"newPostText\"} component={Textarea}\r\n            validate={[required, maxLength25]}/>\r\n        </div>\r\n        <div>\r\n            <button>add post</button>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm<MyPostFormType>({form:\"newPostText\"})(MyPostForm)\r\nexport default MyPosts;","import {PhotosType, UserProfile} from \"../redux/profile-reducer\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<UserProfile>('profile/' + userId).then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>('profile/status', {status: status})\r\n            .then(response => response.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<PhotosType>>('profile/photo', formData)\r\n            .then(response => response.data)\r\n    },\r\n    saveProfile(profile: UserProfile) {\r\n        return instance.put<APIResponseType>('profile', profile).then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n","import {ActionTypes, ThunksType} from \"./redux-store\";\r\nimport {ResultCodeEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\n\r\nconst ADD_POST = 'ADD_POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\nconst SAVE_PROFILE_SUCCESS = 'SAVE_PROFILE_SUCCESS'\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", like: 56},\r\n        {id: 2, message: \"It's my first post\", like: 434},\r\n        {id: 3, message: \"Boom !\", like: 44},\r\n        {id: 4, message: \"I lick banana\", like: 4554}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                like: 0\r\n            }\r\n            return {...state, posts: [newPost, ...state.posts]}\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.id)}\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {...state, profile: {...state.profile, photos: action.photos} as UserProfile}\r\n        case SAVE_PROFILE_SUCCESS:\r\n            return {...state, profile: action.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const addPost = (newPostText: string) => {\r\n    return {\r\n        type: \"ADD_POST\",\r\n        newPostText: newPostText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: null | UserProfile) => {\r\n    return {\r\n        type: 'SET_USER_PROFILE',\r\n        profile: profile\r\n    } as const\r\n}\r\nexport const setStatusProfile = (status: string) => {\r\n    return {\r\n        type: 'SET_STATUS',\r\n        status: status\r\n    } as const\r\n}\r\nexport const deletePost = (id: number) => {\r\n    return {type: 'DELETE_POST', id} as const\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {type: 'SAVE_PHOTO_SUCCESS', photos} as const\r\n}\r\nexport const saveProfileSuccess = (profile: UserProfile) => {\r\n    return {type: 'SAVE_PROFILE_SUCCESS', profile} as const\r\n}\r\n//thunk\r\nexport const getUserProfile = (userId: number): ThunksType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response))\r\n    }\r\nexport const getUserStatus = (userId: number): ThunksType =>\r\n    async (dispatch) => {\r\n        let data = await profileAPI.getStatus(userId)\r\n        dispatch(setStatusProfile(data))\r\n    }\r\nexport const updateStatusProfile = (status: string): ThunksType =>\r\n    async (dispatch) => {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setStatusProfile(status))\r\n        } else {\r\n            alert(data.messages[0])\r\n        }\r\n    }\r\nexport const savePhoto = (photos: File): ThunksType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.savePhoto(photos)\r\n        if (response.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(savePhotoSuccess(response.data))\r\n        }\r\n    }\r\nexport const saveProfile = (profile: UserProfile): ThunksType =>\r\n    async (dispatch) => {\r\n        let data = await profileAPI.saveProfile(profile)\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(saveProfileSuccess(profile))\r\n        } else {\r\n            dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n            return Promise.reject(data.messages[0])\r\n        }\r\n    }\r\n//type\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    profile: UserProfile | null\r\n    status: string\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    like: number\r\n}\r\nexport type UserProfile = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    aboutMe: string\r\n    contacts: ContactsUserProfile\r\n    photos: PhotosType\r\n}\r\nexport type ContactsUserProfile = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    like: number\r\n}\r\n\r\ntype IMapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype IMapDispatchToProps = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<IMapStateToPropsType, IMapDispatchToProps, {}, AppStateType>\r\n(mapStateToProps, {addPost})(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport s from './Profile.module.css';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./Myposts/MyPostsContainer\";\r\nimport {UserProfile} from \"../../redux/profile-reducer\";\r\n\r\nexport function Profile(props: ProfileType) {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatusProfile={props.updateStatusProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//type\r\ntype ProfileType = {\r\n    profile: UserProfile | null\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    savePhoto: (photos: File) => void\r\n    isOwner: boolean\r\n    saveProfile: (profile: UserProfile) => void\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    updateStatusProfile,\r\n    UserProfile,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router\"\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId)\r\n        this.props.getUserStatus(+userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusProfile={this.props.updateStatusProfile}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isFetching\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n    (mapStateToProps, {getUserProfile, getUserStatus, updateStatusProfile, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    profile: UserProfile | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatusProfile: (status: string) => void\r\n    savePhoto: (photos: File) => void\r\n    saveProfile: (profile: UserProfile) => void\r\n}\r\ntype ProfileContainerAPIType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamsType = { userId: string }\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerAPIType\r\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\n\r\ntype HeaderType = {\r\n    login: string | null\r\n    isFetching: boolean\r\n    logout: () => void\r\n}\r\n\r\nfunction Header(props: HeaderType) {\r\n    return <div className={s.backImg}>\r\n        <header className={s.header}>\r\n            <div className={s.loginBock}>\r\n                {props.isFetching\r\n                    ? <div className={s.loginBockAuthorized}>\r\n                        {props.login}\r\n                        <button onClick={props.logout}>Logout</button>\r\n                    </div>\r\n                    : <NavLink to={\"/login\"}>LogIN</NavLink>}\r\n            </div>\r\n        </header>\r\n    </div>\r\n}\r\n\r\nexport default Header;","import {instance, APIResponseType, ResultCodeEnum, ResultForCaptcha} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>('auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultForCaptcha>>\r\n        (`auth/login`, {email, password, rememberMe, captcha}).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//type\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}","import {ActionTypes, ThunksType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {ResultCodeEnum, ResultForCaptcha, securityAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\"\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    captchaUrl: null // if null, then captcha is not required\r\n}\r\nexport const authReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isFetching: boolean) => {\r\n    return {type: SET_USER_DATA, payload: {id, email, login, isFetching}} as const\r\n}\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\r\n    return {type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}} as const\r\n}\r\n//thunk\r\nexport const getAutUserData = (): ThunksType => async (dispatch) => {\r\n    const response = await authAPI.me()\r\n    if (response.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = response.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunksType => async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAutUserData())\r\n    } else {\r\n        if (data.resultCode === ResultForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message: string = data.messages.length > 0 ? data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\nexport const logout = (): ThunksType => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunksType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n//type\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    captchaUrl: string | null\r\n}\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype MapStateToProps = {\r\n    login: string|null\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    logout: () => void\r\n}\r\ntype HeaderContainerType = MapStateToProps & MapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component <HeaderContainerType> {\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isFetching: state.auth.isFetching,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, AppStateType>\r\n(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {CreateField, Input} from \"../common/formControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport containerStyle from \"../../Container.module.css\"\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                         handleSubmit,\r\n                                                                                                         error,\r\n                                                                                                         captchaUrl\r\n                                                                                                     }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {CreateField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input, null, null)}\r\n        {CreateField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"}, null)}\r\n        {CreateField<LoginFormValuesTypeKeys>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n        {captchaUrl && <img src={captchaUrl}/>}\r\n        {captchaUrl && CreateField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}, null)}\r\n\r\n        {error && <div className={containerStyle.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: \"login\"})(LoginForm)\r\n\r\nconst Login: React.FC<MapStateToProps & MapDispatchToProps> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isFetching) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.auth.isFetching,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\nexport default connect(MapStateToProps, {login})(Login)\r\n\r\n//types\r\ntype LoginFormValuesTypeKeys = Extract<keyof FormDataType, string>\r\ntype LoginFormOwnProps = { captchaUrl: string | null }\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    error: string\r\n    captcha: string\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype MapStateToProps = {\r\n    isFetching: boolean\r\n    captchaUrl: string | null\r\n}","import {ActionTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {}\r\n\r\nexport const sidebarReducer = (state = initialState, action: ActionTypes) => {\r\n    return state\r\n}","import {ActionTypes, ThunksType} from \"./redux-store\";\r\nimport {getAutUserData} from \"./auth-reducer\";\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\nconst SET_ERROR_MESSAGE = \"SET_ERROR_MESSAGE\"\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\nexport const appReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {...state, initialized: true}\r\n        case SET_ERROR_MESSAGE:\r\n            return {...state, errorMessage: \"\"}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: \"SET_INITIALIZED\"\r\n    } as const\r\n}\r\nexport const errorMessage = (errorMessage: string) => {\r\n    return {\r\n        type: \"SET_ERROR_MESSAGE\",\r\n        errorMessage\r\n    } as const\r\n}\r\n//thunk\r\nexport const initializeApp = (): ThunksType => async (dispatch) => {\r\n    let promise = dispatch(getAutUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n    /*await dispatch(getAutUserData())\r\n    dispatch(initializedSuccess())*/\r\n}\r\n//type\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n    errorMessage?: string\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {\r\n    profileReducer,\r\n    addPost,\r\n    deletePost,\r\n    setStatusProfile,\r\n    setUserProfile,\r\n    savePhotoSuccess, saveProfileSuccess\r\n} from \"./profile-reducer\";\r\nimport {dialogsReducer, addMessage} from \"./dialogs-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {\r\n    usersReducer, followSuccess, setCurrentPage, toggleIsFetching,\r\n    setTotalUsersCount, setUsers, unfollowSuccess, toggleFollowingInProgress\r\n} from \"./users-reducer\";\r\nimport {authReducer, getCaptchaUrlSuccess, setAuthUserData} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {appReducer, errorMessage, initializedSuccess} from \"./app-reducer\";\r\n\r\nexport type ActionTypes = ReturnType<typeof addPost> | ReturnType<typeof setStatusProfile> |\r\n    ReturnType<typeof addMessage> | ReturnType<typeof setUsers> |\r\n    ReturnType<typeof followSuccess> | ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setCurrentPage> | ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFetching> | ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setAuthUserData> | ReturnType<typeof toggleFollowingInProgress> |\r\n    ReturnType<typeof initializedSuccess> | ReturnType<typeof deletePost> |\r\n    ReturnType<typeof savePhotoSuccess> | ReturnType<typeof saveProfileSuccess> |\r\n    ReturnType<typeof getCaptchaUrlSuccess> | ReturnType<typeof errorMessage>\r\n\r\n\r\nexport type ThunksType = ThunkAction<void, AppStateType, unknown, ActionTypes>;\r\n\r\nexport let reducersBatch = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    sidebar: sidebarReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\nlet store = createStore(reducersBatch, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppStateType = ReturnType<typeof reducersBatch>\r\n\r\n// @ts-ignore\r\nwindow.stroe = store\r\n\r\nexport default store","import React from \"react\";\r\nimport './App.css';\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Settings from \"./components/Setting/Settings\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {Preloader} from \"./components/common/preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router\";\r\n\r\n//const DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogContainer'));\r\n//const Login = React.lazy(() => import('./components/Login/Login'));\r\n\r\nclass App extends React.Component <AppContainerType> {\r\n    /* catchAllUnhandledErrors = (reason: string, promise: string) => {\r\n         alert(\"Some error occurred\")\r\n     }*/\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        //    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //     window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialize) {\r\n            return <Preloader/>\r\n        } else {\r\n            return (\r\n                <div className=\"all\">\r\n                    <div className='app-wrapper'>\r\n                        <div className='header'><HeaderContainer/></div>\r\n                        <div className=\"NavAndDisp\">\r\n                            <div className=\"navbar\"><Navbar/></div>\r\n                            <div className='display'>\r\n                                <Switch>\r\n                                    <Redirect exact from='/' to={\"/profile\"}/>\r\n                                    {/*<Route path='/login' render={withSuspense(<Login/>)}/>*/}\r\n                                    <Route path='/login' render={() => <Login/>}/>\r\n                                    {/*<Route path='/dialogs' render={withSuspense(<DialogsContainer/>)}/>*/}\r\n                                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                                    <Route path='/profile/:userId?'\r\n                                           render={() => <ProfileContainer/>}/>\r\n                                    <Route path='/users'\r\n                                           render={() => <UsersContainer/>}/>\r\n                                    <Route path='/settings'\r\n                                           render={() => <Settings/>}/>\r\n                                    <Route path='/news'\r\n                                           render={() => <News/>}/>\r\n                                    <Route path='/music'\r\n                                           render={() => <Music/>}/>\r\n                                    <Route path='*'\r\n                                           render={() => <div>404 NOT FOUND</div>}/>\r\n                                </Switch>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        initialize: state.app.initialized\r\n    }\r\n}\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>\r\n    (MapStateToProps, {initializeApp}))(App)\r\n\r\nexport const SamuraiJSApp = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\n//types\r\ntype AppContainerType = MapStateToPropsType & MapDispatchToPropsType & ErrorWindowType\r\ntype MapStateToPropsType = { initialize: boolean }\r\ntype MapDispatchToPropsType = { initializeApp: () => void }\r\ntype ErrorWindowType = {\r\n    catchAllUnhandledErrors: (reason: string, promise: string) => void\r\n}\r\n","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {SamuraiJSApp} from './App';\r\n\r\n    ReactDOM.render(<SamuraiJSApp />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockProfile\":\"ProfileInfo_blockProfile__2IM7m\",\"blockPhoto\":\"ProfileInfo_blockPhoto__2PURC\",\"blockInfo\":\"ProfileInfo_blockInfo__3Lrw8\",\"head\":\"ProfileInfo_head__1IRYz\",\"avaProfile\":\"ProfileInfo_avaProfile__3Grrl\",\"contacts\":\"ProfileInfo_contacts__2pgHT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"Container_formSummaryError__3gGcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__19o41\",\"backImg\":\"Header_backImg__3nWE1\",\"loginBock\":\"Header_loginBock__1YYQW\",\"activeLink\":\"Header_activeLink__3GCQ1\",\"loginBockAuthorized\":\"Header_loginBockAuthorized__2YPNb\"};","module.exports = __webpack_public_path__ + \"static/media/ava.be951e71.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"all\":\"Users_all__29T66\",\"users\":\"Users_users__1RLAP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__23BUL\",\"usersPage\":\"Paginator_usersPage__3pZKX\",\"spanPage\":\"Paginator_spanPage__3IpSq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__X8OAE\",\"error\":\"FormsControls_error__N2Hap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"User_ava__3fuiQ\",\"user\":\"User_user__1ymtO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__3K_PL\",\"item\":\"MyPosts_item__3CMdZ\",\"allPost\":\"MyPosts_allPost__X_O7x\"};"],"sourceRoot":""}